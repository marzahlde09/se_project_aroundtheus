!function(){"use strict";class e{constructor(e,t,s,r,n){this._name=e.name,this._link=e.link,this.liked=e.isLiked,this._id=e._id,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeClick=n}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this.card.querySelector(".card__delete").addEventListener("click",(()=>{this._handleDeleteClick()})),this.card.querySelector(".card__like").addEventListener("click",(()=>{this._handleLikeClick()})),this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}deleteCard(){this.card.remove(),this.card=null}generateCard(){return this.card=this._getTemplate(),this._cardImageElement=this.card.querySelector(".card__image"),this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this.card.querySelector(".card__name").textContent=this._name,this.liked&&this.card.querySelector(".card__like").classList.add("card__like_active"),this._setEventListeners(),this.card}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e,t){const s=this._formElement.querySelector(`.${e.name}-input-error`);e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`.${e.name}-input-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}disableButton(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}}class s{constructor(e){this._popupSelector=e,this._popupElement=document.querySelector(this._popupSelector).closest(".popup")}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("mousedown",this._handleOutsideClickClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("mousedown",this._handleOutsideClickClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleOutsideClickClose=e=>{e.target.classList.contains("popup_opened")&&this.close()};setEventListeners(){this._popupElement.querySelector(".popup__close-button").addEventListener("click",(()=>{this.close()}))}}class r extends s{constructor(e,t){super(e),this.formElement=this._popupElement.querySelector(".form"),this.submitButton=this.formElement.querySelector(".form__submit"),this._submitForm=t}_getInputValues(){const e=Array.from(this.formElement.querySelectorAll(".form__field")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}close(){super.close(),this.formElement.reset()}setEventListeners(){this.formElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitForm(this._getInputValues())})),super.setEventListeners()}}const n=document.querySelector(".profile__edit-button"),o=document.querySelector(".profile__add-button"),i=document.querySelector(".profile__picture-edit-button"),a=document.forms["profile-form"].elements.name,l=document.forms["profile-form"].elements.job,c={};var u;u={formSelector:".form",inputSelector:".form__field",submitButtonSelector:".form__submit",inactiveButtonClass:"form__submit_disabled",inputErrorClass:"form__field_type_error",errorClass:"form__input-error_active"},Array.from(document.querySelectorAll(u.formSelector)).forEach((e=>{const s=new t(u,e),r=e.getAttribute("name");c[r]=s,s.enableValidation()}));const h=new class{constructor(e){let{baseUrl:t,authorization:s}=e;this._baseUrl=t,this._authorization=s}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authorization}})}getCardInfo(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._authorization}})}editUserInfo(e){let{name:t,job:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._authorization,"Content-Type":"application/json"},body:JSON.stringify({name:t,about:s})})}editProfilePicture(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._authorization,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})})}addNewCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authorization,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:s})})}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{authorization:this._authorization}})}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:{authorization:this._authorization}})}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:{authorization:this._authorization}})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",authorization:"a0548a22-3cdf-48eb-9822-7e7daf1b0604"}),d=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarSelector=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){let{name:t,about:s}=e;this._nameElement.textContent=t,this._jobElement.textContent=s}setAvatar(e){this._avatarSelector.src=e}}({nameSelector:".profile__name",jobSelector:".profile__job",avatarSelector:".profile__picture"}),m=new r("form[name='avatar-form']",(e=>{m.submitButton.textContent="Saving...",h.editProfilePicture(e.link).then((e=>!!e.ok||e.status)).then((()=>{d.setAvatar(e.link)})).catch((e=>console.error(e))).finally((()=>{m.submitButton.textContent="Save",m.close()}))}));m.setEventListeners();const _=new r("form[name='card-form']",(e=>{_.submitButton.textContent="Saving...",h.addNewCard({name:e.name,link:e.link}).then((e=>!!e.ok||e.status)).then((()=>{v.addItem(e)})).catch((e=>console.error(e))).finally((()=>{_.submitButton.textContent="Create",_.close()}))}));_.setEventListeners();const p=new r("form[name='profile-form']",(e=>{p.submitButton.textContent="Saving...",h.editUserInfo({name:e.name,job:e.job}).then((e=>!!e.ok||e.status)).then((()=>{d.setUserInfo({name:e.name,about:e.job})})).catch((e=>console.error(e))).finally((()=>{p.submitButton.textContent="Save",p.close()}))}));p.setEventListeners();const f=new class extends s{constructor(e){super(e),this.formElement=this._popupElement.querySelector(".form")}setSubmitAction(e){this._handleSubmitCallback=e}setEventListeners(){this.formElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmitCallback()})),super.setEventListeners()}}("form[name='delete-form']");f.setEventListeners();const E=new class extends s{constructor(e){super(e),this._popupImage=this._popupElement.querySelector("img"),this._popupCaption=this._popupElement.querySelector("figcaption")}open(e){let{name:t,link:s}=e;this._popupImage.alt=t,this._popupImage.src=s,this._popupCaption.textContent=t,super.open()}}(".popup__picture");E.setEventListeners();const v=new class{constructor(e,t){this._renderer=e,this.container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._renderer(e)}setItems(e){this._items=e}}((t=>{const s=new e(t,".card-template",(e=>{E.open(e)}),(()=>{f.setSubmitAction((()=>{h.deleteCard(t._id),s.deleteCard(),f.close()})),f.open()}),(()=>{const e=s.card.querySelector(".card__like");s.liked?h.removeLike(t._id).then((e=>!!e.ok||e.status)).then((()=>{e.classList.remove("card__like_active"),s.liked=!1})).catch((e=>console.error(e))):h.addLike(t._id).then((e=>!!e.ok||e.status)).then((()=>{e.classList.add("card__like_active"),s.liked=!0})).catch((e=>console.error(e)))})),r=s.generateCard();v.container.prepend(r)}),".gallery__cards");n.addEventListener("click",(function(){const e=d.getUserInfo();a.value=e.name,l.value=e.job,c["profile-form"].resetValidation(),p.open()})),o.addEventListener("click",(function(){c["card-form"].resetValidation(),_.open()})),i.addEventListener("click",(function(){c["avatar-form"].resetValidation(),m.open()}));const b=h.getCardInfo().then((e=>e.ok?e.json():e.status)).then((e=>{v.setItems(e),v.renderItems()})).catch((e=>console.error(e))),S=h.getUserInfo().then((e=>e.ok?e.json():e.status)).then((e=>{d.setUserInfo({name:e.name,about:e.about}),d.setAvatar(e.avatar)})).catch((e=>console.error(e)));Promise.all([b,S]).then((e=>e.ok?e.json():e.status)).catch((e=>console.error(e)))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,