!function(){"use strict";class e{constructor(e,t,s,r,n){this._name=e.name,this._link=e.link,this.liked=e.isLiked,this.id=e._id,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeClick=n}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this.card.querySelector(".card__delete").addEventListener("click",(()=>{this._handleDeleteClick()})),this.card.querySelector(".card__like").addEventListener("click",(()=>{this._handleLikeClick()})),this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}deleteCard(){this.card.remove(),this.card=null}generateCard(){return this.card=this._getTemplate(),this._cardImageElement=this.card.querySelector(".card__image"),this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this.card.querySelector(".card__name").textContent=this._name,this.liked&&this.card.querySelector(".card__like").classList.add("card__like_active"),this._setEventListeners(),this.card}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e,t){const s=this._formElement.querySelector(`.${e.name}-input-error`);e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`.${e.name}-input-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}disableButton(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}}class s{constructor(e){this._popupSelector=e,this._popupElement=document.querySelector(this._popupSelector).closest(".popup")}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("mousedown",this._handleOutsideClickClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("mousedown",this._handleOutsideClickClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleOutsideClickClose=e=>{e.target.classList.contains("popup_opened")&&this.close()};setEventListeners(){this._popupElement.querySelector(".popup__close-button").addEventListener("click",(()=>{this.close()}))}}class r extends s{constructor(e,t){super(e),this.formElement=this._popupElement.querySelector(".form"),this.submitButton=this.formElement.querySelector(".form__submit"),this._submitForm=t}_getInputValues(){const e=Array.from(this.formElement.querySelectorAll(".form__field")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}close(){super.close(),this.formElement.reset()}setEventListeners(){this.formElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitForm(this._getInputValues())})),super.setEventListeners()}}const n=document.querySelector(".profile__edit-button"),o=document.querySelector(".profile__add-button"),i=document.querySelector(".profile__picture-edit-button"),a=document.forms["profile-form"].elements.name,l=document.forms["profile-form"].elements.job,c={};var u;u={formSelector:".form",inputSelector:".form__field",submitButtonSelector:".form__submit",inactiveButtonClass:"form__submit_disabled",inputErrorClass:"form__field_type_error",errorClass:"form__input-error_active"},Array.from(document.querySelectorAll(u.formSelector)).forEach((e=>{const s=new t(u,e),r=e.getAttribute("name");c[r]=s,s.enableValidation()}));const h=new class{constructor(e){let{baseUrl:t,authorization:s}=e;this._baseUrl=t,this._authorization=s}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authorization}})}getCardInfo(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._authorization}})}editUserInfo(e){let{name:t,job:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._authorization,"Content-Type":"application/json"},body:JSON.stringify({name:t,about:s})})}editProfilePicture(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._authorization,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})})}addNewCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authorization,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:s})})}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{authorization:this._authorization}})}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:{authorization:this._authorization}})}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:{authorization:this._authorization}})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",authorization:"a0548a22-3cdf-48eb-9822-7e7daf1b0604"}),d=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarSelector=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){let{name:t,about:s}=e;this._nameElement.textContent=t,this._jobElement.textContent=s}setAvatar(e){this._avatarSelector.src=e}}({nameSelector:".profile__name",jobSelector:".profile__job",avatarSelector:".profile__picture"}),m=new r("form[name='avatar-form']",(e=>{m.submitButton.textContent="Saving...",h.editProfilePicture(e.link).then((e=>!!e.ok||e.status)).then((()=>{d.setAvatar(e.link)})).catch((e=>console.error(e))).finally((()=>{m.submitButton.textContent="Save",m.close()}))}));m.setEventListeners();const _=new r("form[name='card-form']",(e=>{_.submitButton.textContent="Saving...",h.addNewCard({name:e.name,link:e.link}).then((e=>e.ok?e.json():e.status)).then((e=>{v.addItem(e)})).catch((e=>console.error(e))).finally((()=>{_.submitButton.textContent="Create",_.close()}))}));_.setEventListeners();const p=new r("form[name='profile-form']",(e=>{p.submitButton.textContent="Saving...",h.editUserInfo({name:e.name,job:e.job}).then((e=>!!e.ok||e.status)).then((()=>{d.setUserInfo({name:e.name,about:e.job})})).catch((e=>console.error(e))).finally((()=>{p.submitButton.textContent="Save",p.close()}))}));p.setEventListeners();const f=new class extends s{constructor(e){super(e),this.formElement=this._popupElement.querySelector(".form")}setSubmitAction(e){this._handleSubmitCallback=e}setEventListeners(){this.formElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmitCallback()})),super.setEventListeners()}}("form[name='delete-form']");f.setEventListeners();const E=new class extends s{constructor(e){super(e),this._popupImage=this._popupElement.querySelector("img"),this._popupCaption=this._popupElement.querySelector("figcaption")}open(e){let{name:t,link:s}=e;this._popupImage.alt=t,this._popupImage.src=s,this._popupCaption.textContent=t,super.open()}}(".popup__picture");E.setEventListeners();const v=new class{constructor(e,t){this._renderer=e,this.container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._renderer(e)}setItems(e){this._items=e}}((t=>{const s=new e(t,".card-template",(e=>{E.open(e)}),(()=>{f.setSubmitAction((()=>{h.deleteCard(t._id),s.deleteCard(),f.close()})),f.open()}),(()=>{const e=s.card.querySelector(".card__like");s.liked?h.removeLike(s.id).then((e=>!!e.ok||e.status)).then((()=>{e.classList.remove("card__like_active"),s.liked=!1})).catch((e=>console.error(e))):h.addLike(s.id).then((e=>!!e.ok||e.status)).then((()=>{e.classList.add("card__like_active"),s.liked=!0})).catch((e=>console.error(e)))})),r=s.generateCard();v.container.append(r)}),".gallery__cards");n.addEventListener("click",(function(){const e=d.getUserInfo();a.value=e.name,l.value=e.job,c["profile-form"].resetValidation(),p.open()})),o.addEventListener("click",(function(){c["card-form"].resetValidation(),_.open()})),i.addEventListener("click",(function(){c["avatar-form"].resetValidation(),m.open()}));const b=h.getCardInfo().then((e=>e.ok?e.json():e.status)).then((e=>{v.setItems(e),v.renderItems()})).catch((e=>console.error(e))),S=h.getUserInfo().then((e=>e.ok?e.json():e.status)).then((e=>{d.setUserInfo({name:e.name,about:e.about}),d.setAvatar(e.avatar)})).catch((e=>console.error(e)));Promise.all([b,S]).then((e=>e.ok?e.json():e.status)).catch((e=>console.error(e)))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RyxFQUFLMkgsSUFFNUJqQixFQUFlLGdCQUFnQmxDLGtCQUMvQnNGLEVBQVloRixNQUNkLElBRUFzQixFQUFVM0UsaUJBQWlCLFNBQVMsV0FDbENpRixFQUFlLGFBQWFsQyxrQkFDNUJrRixFQUFTNUUsTUFDWCxJQUVBdUIsRUFBYTVFLGlCQUFpQixTQUFTLFdBQ3JDaUYsRUFBZSxlQUFlbEMsa0JBQzlCd0UsRUFBV2xFLE1BQ2IsSUFLQSxNQUFNb0csRUFBZW5FLEVBQ2xCUyxjQUNBeUIsTUFBTUMsR0FBU0EsRUFBSUMsR0FBS0QsRUFBSVMsT0FBU1QsRUFBSUUsU0FDekNILE1BQU1DLElBQ0xVLEVBQVlpQixTQUFTM0IsR0FDckJVLEVBQVljLGFBQWEsSUFFMUJyQixPQUFPQyxHQUFRQyxRQUFRQyxNQUFNRixLQUUxQjZCLEVBQWlCcEUsRUFDcEJNLGNBQ0E0QixNQUFNQyxHQUFTQSxFQUFJQyxHQUFLRCxFQUFJUyxPQUFTVCxFQUFJRSxTQUN6Q0gsTUFBTUMsSUFDTFgsRUFBU08sWUFBWSxDQUFFdkksS0FBTTJJLEVBQUkzSSxLQUFNeUgsTUFBT2tCLEVBQUlsQixRQUNsRE8sRUFBU1EsVUFBVUcsRUFBSWhCLE9BQU8sSUFFL0JtQixPQUFPQyxHQUFRQyxRQUFRQyxNQUFNRixLQUVoQzhCLFFBQVFDLElBQUksQ0FBQ0gsRUFBY0MsSUFDeEJsQyxNQUFNQyxHQUFTQSxFQUFJQyxHQUFLRCxFQUFJUyxPQUFTVCxFQUFJRSxTQUN6Q0MsT0FBT0MsR0FBUUMsUUFBUUMsTUFBTUYsSSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cERlbGV0ZUNvbmZpcm1hdGlvbi5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBkYXRhLFxuICAgIGNhcmRTZWxlY3RvcixcbiAgICBoYW5kbGVJbWFnZUNsaWNrLFxuICAgIGhhbmRsZURlbGV0ZUNsaWNrLFxuICAgIGhhbmRsZUxpa2VDbGlja1xuICApIHtcbiAgICB0aGlzLl9uYW1lID0gZGF0YS5uYW1lO1xuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XG4gICAgdGhpcy5saWtlZCA9IGRhdGEuaXNMaWtlZDtcbiAgICB0aGlzLmlkID0gZGF0YS5faWQ7XG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xuICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sgPSBoYW5kbGVJbWFnZUNsaWNrO1xuICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrID0gaGFuZGxlRGVsZXRlQ2xpY2s7XG4gICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrID0gaGFuZGxlTGlrZUNsaWNrO1xuICB9XG5cbiAgX2dldFRlbXBsYXRlKCkge1xuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZFwiKVxuICAgICAgLmNsb25lTm9kZSh0cnVlKTtcblxuICAgIHJldHVybiBjYXJkRWxlbWVudDtcbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLmNhcmQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19kZWxldGVcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrKCk7XG4gICAgfSk7XG4gICAgdGhpcy5jYXJkLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrKCk7XG4gICAgfSk7XG4gICAgdGhpcy5fY2FyZEltYWdlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayh7IG5hbWU6IHRoaXMuX25hbWUsIGxpbms6IHRoaXMuX2xpbmsgfSk7XG4gICAgfSk7XG4gIH1cblxuICBkZWxldGVDYXJkKCkge1xuICAgIHRoaXMuY2FyZC5yZW1vdmUoKTtcbiAgICB0aGlzLmNhcmQgPSBudWxsO1xuICB9XG5cbiAgZ2VuZXJhdGVDYXJkKCkge1xuICAgIHRoaXMuY2FyZCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XG4gICAgdGhpcy5fY2FyZEltYWdlRWxlbWVudCA9IHRoaXMuY2FyZC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpO1xuICAgIHRoaXMuX2NhcmRJbWFnZUVsZW1lbnQuc3JjID0gdGhpcy5fbGluaztcbiAgICB0aGlzLl9jYXJkSW1hZ2VFbGVtZW50LmFsdCA9IHRoaXMuX25hbWU7XG4gICAgdGhpcy5jYXJkLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbmFtZVwiKS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XG4gICAgaWYgKHRoaXMubGlrZWQpIHtcbiAgICAgIHRoaXMuY2FyZC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2VcIikuY2xhc3NMaXN0LmFkZChcImNhcmRfX2xpa2VfYWN0aXZlXCIpO1xuICAgIH1cblxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICByZXR1cm4gdGhpcy5jYXJkO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGZvcm1FbGVtZW50KSB7XG4gICAgdGhpcy5fZm9ybVNlbGVjdG9yID0gc2V0dGluZ3MuZm9ybVNlbGVjdG9yO1xuICAgIHRoaXMuX2lucHV0U2VsZWN0b3IgPSBzZXR0aW5ncy5pbnB1dFNlbGVjdG9yO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yID0gc2V0dGluZ3Muc3VibWl0QnV0dG9uU2VsZWN0b3I7XG4gICAgdGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyA9IHNldHRpbmdzLmluYWN0aXZlQnV0dG9uQ2xhc3M7XG4gICAgdGhpcy5faW5wdXRFcnJvckNsYXNzID0gc2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzO1xuICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSBzZXR0aW5ncy5lcnJvckNsYXNzO1xuICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZm9ybUVsZW1lbnQ7XG4gICAgdGhpcy5faW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcbiAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvcilcbiAgICApO1xuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3JcbiAgICApO1xuICB9XG5cbiAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgZXJyb3JNZXNzYWdlKSB7XG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIGAuJHtpbnB1dEVsZW1lbnQubmFtZX0taW5wdXQtZXJyb3JgXG4gICAgKTtcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGVycm9yTWVzc2FnZTtcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTtcbiAgfVxuXG4gIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgYC4ke2lucHV0RWxlbWVudC5uYW1lfS1pbnB1dC1lcnJvcmBcbiAgICApO1xuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcbiAgfVxuXG4gIF9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KSB7XG4gICAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBfaGFzSW52YWxpZElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9pbnB1dExpc3Quc29tZSgoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICByZXR1cm4gIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZDtcbiAgICB9KTtcbiAgfVxuXG4gIF90b2dnbGVCdXR0b25TdGF0ZSgpIHtcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KCkpIHtcbiAgICAgIHRoaXMuZGlzYWJsZUJ1dHRvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9idXR0b25FbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gICAgICB0aGlzLl9idXR0b25FbGVtZW50LmRpc2FibGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgcmVzZXRWYWxpZGF0aW9uKCkge1xuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcbiAgICB9KTtcbiAgfVxuXG4gIGRpc2FibGVCdXR0b24oKSB7XG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5fcG9wdXBTZWxlY3RvciA9IHBvcHVwU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQgPSBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9wb3B1cFNlbGVjdG9yKVxyXG4gICAgICAuY2xvc2VzdChcIi5wb3B1cFwiKTtcclxuICB9XHJcblxyXG4gIG9wZW4oKSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInBvcHVwX29wZW5lZFwiKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICBcIm1vdXNlZG93blwiLFxyXG4gICAgICB0aGlzLl9oYW5kbGVPdXRzaWRlQ2xpY2tDbG9zZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJwb3B1cF9vcGVuZWRcIik7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcclxuICAgICAgXCJtb3VzZWRvd25cIixcclxuICAgICAgdGhpcy5faGFuZGxlT3V0c2lkZUNsaWNrQ2xvc2VcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlRXNjQ2xvc2UgPSAoZXZ0KSA9PiB7XHJcbiAgICBpZiAoZXZ0LmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgX2hhbmRsZU91dHNpZGVDbGlja0Nsb3NlID0gKGV2dCkgPT4ge1xyXG4gICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicG9wdXBfb3BlbmVkXCIpKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fY2xvc2UtYnV0dG9uXCIpXHJcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBzdWJtaXRGb3JtKSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuZm9ybUVsZW1lbnQgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5mb3JtXCIpO1xyXG4gICAgdGhpcy5zdWJtaXRCdXR0b24gPSB0aGlzLmZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybV9fc3VibWl0XCIpO1xyXG4gICAgdGhpcy5fc3VibWl0Rm9ybSA9IHN1Ym1pdEZvcm07XHJcbiAgfVxyXG5cclxuICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XHJcbiAgICBjb25zdCBpbnB1dEZpZWxkcyA9IEFycmF5LmZyb20oXHJcbiAgICAgIHRoaXMuZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5mb3JtX19maWVsZFwiKVxyXG4gICAgKTtcclxuICAgIGNvbnN0IGRhdGEgPSB7fTtcclxuICAgIGlucHV0RmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XHJcbiAgICAgIGRhdGFbZmllbGQubmFtZV0gPSBmaWVsZC52YWx1ZTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICB0aGlzLmZvcm1FbGVtZW50LnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuZm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9zdWJtaXRGb3JtKHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbn1cclxuIiwiLypleHBvcnQgY29uc3QgaW5pdGlhbENhcmRzID0gW1xyXG4gIHtcclxuICAgIG5hbWU6IFwiWW9zZW1pdGUgVmFsbGV5XCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QveW9zZW1pdGUuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxha2UgTG91aXNlXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFrZS1sb3Vpc2UuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkJhbGQgTW91bnRhaW5zXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvYmFsZC1tb3VudGFpbnMuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxhdGVtYXJcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYXRlbWFyLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJWYW5vaXNlIE5hdGlvbmFsIFBhcmtcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC92YW5vaXNlLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYWdvIGRpIEJyYWllc1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhZ28uanBnXCIsXHJcbiAgfSxcclxuXTsqL1xyXG5cclxuZXhwb3J0IGNvbnN0IGZvcm1TZXR0aW5ncyA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLmZvcm1cIixcclxuICBpbnB1dFNlbGVjdG9yOiBcIi5mb3JtX19maWVsZFwiLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5mb3JtX19zdWJtaXRcIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcImZvcm1fX3N1Ym1pdF9kaXNhYmxlZFwiLFxyXG4gIGlucHV0RXJyb3JDbGFzczogXCJmb3JtX19maWVsZF90eXBlX2Vycm9yXCIsXHJcbiAgZXJyb3JDbGFzczogXCJmb3JtX19pbnB1dC1lcnJvcl9hY3RpdmVcIixcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBpbml0aWFsVXNlckRhdGEgPSB7XHJcbiAgbmFtZTogXCJKYWNxdWVzIENvdXN0ZWF1XCIsXHJcbiAgam9iOiBcIkV4cGxvcmVyXCIsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZWRpdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fZWRpdC1idXR0b25cIik7XHJcbmV4cG9ydCBjb25zdCBhZGRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2FkZC1idXR0b25cIik7XHJcbmV4cG9ydCBjb25zdCBhdmF0YXJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiLnByb2ZpbGVfX3BpY3R1cmUtZWRpdC1idXR0b25cIlxyXG4pO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUZvcm1OYW1lID0gZG9jdW1lbnQuZm9ybXNbXCJwcm9maWxlLWZvcm1cIl0uZWxlbWVudHNbXCJuYW1lXCJdO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUZvcm1Kb2IgPSBkb2N1bWVudC5mb3Jtc1tcInByb2ZpbGUtZm9ybVwiXS5lbGVtZW50c1tcImpvYlwiXTtcclxuIiwiaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XG5pbXBvcnQgUG9wdXBEZWxldGVDb25maXJtYXRpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBEZWxldGVDb25maXJtYXRpb24uanNcIjtcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcbmltcG9ydCBVc2VySW5mbyBmcm9tIFwiLi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xuaW1wb3J0IEFwaSBmcm9tIFwiLi4vY29tcG9uZW50cy9BcGkuanNcIjtcbmltcG9ydCB7XG4gIC8qaW5pdGlhbENhcmRzLCovXG4gIGZvcm1TZXR0aW5ncyxcbiAgZWRpdEJ1dHRvbixcbiAgYWRkQnV0dG9uLFxuICBhdmF0YXJCdXR0b24sXG4gIHByb2ZpbGVGb3JtTmFtZSxcbiAgcHJvZmlsZUZvcm1Kb2IsXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8qIEFkZCBmb3JtIHZhbGlkYXRpb24gdG8gZm9ybXMgKi9cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbmNvbnN0IGZvcm1WYWxpZGF0b3JzID0ge307XG5cbmNvbnN0IGVuYWJsZVZhbGlkYXRpb24gPSAoZm9ybVNldHRpbmdzKSA9PiB7XG4gIGNvbnN0IGZvcm1MaXN0ID0gQXJyYXkuZnJvbShcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGZvcm1TZXR0aW5ncy5mb3JtU2VsZWN0b3IpXG4gICk7XG4gIGZvcm1MaXN0LmZvckVhY2goKGZvcm1FbGVtZW50KSA9PiB7XG4gICAgY29uc3QgdmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoZm9ybVNldHRpbmdzLCBmb3JtRWxlbWVudCk7XG4gICAgY29uc3QgZm9ybU5hbWUgPSBmb3JtRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpO1xuICAgIGZvcm1WYWxpZGF0b3JzW2Zvcm1OYW1lXSA9IHZhbGlkYXRvcjtcbiAgICB2YWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuICB9KTtcbn07XG5cbmVuYWJsZVZhbGlkYXRpb24oZm9ybVNldHRpbmdzKTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLyogRGVjbGFyYXRpb24gb2YgQXBpIG9iamVjdCAqL1xuLyogKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuY29uc3QgYXBpID0gbmV3IEFwaSh7XG4gIGJhc2VVcmw6IFwiaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjFcIixcbiAgYXV0aG9yaXphdGlvbjogXCJhMDU0OGEyMi0zY2RmLTQ4ZWItOTgyMi03ZTdkYWYxYjA2MDRcIixcbn0pO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8qIERlY2xhcmF0aW9uIG9mIFVzZXJJbmZvIG9iamVjdCAqL1xuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5jb25zdCB1c2VySW5mbyA9IG5ldyBVc2VySW5mbyh7XG4gIG5hbWVTZWxlY3RvcjogXCIucHJvZmlsZV9fbmFtZVwiLFxuICBqb2JTZWxlY3RvcjogXCIucHJvZmlsZV9fam9iXCIsXG4gIGF2YXRhclNlbGVjdG9yOiBcIi5wcm9maWxlX19waWN0dXJlXCIsXG59KTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLyogRGVjbGFyYXRpb25zIG9mIHBvcHVwcyAqL1xuLyogKioqKioqKioqKioqKioqKioqKioqKiAqL1xuY29uc3QgYXZhdGFyRm9ybSA9IG5ldyBQb3B1cFdpdGhGb3JtKFwiZm9ybVtuYW1lPSdhdmF0YXItZm9ybSddXCIsIChkYXRhKSA9PiB7XG4gIGF2YXRhckZvcm0uc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gXCJTYXZpbmcuLi5cIjtcbiAgYXBpXG4gICAgLmVkaXRQcm9maWxlUGljdHVyZShkYXRhLmxpbmspXG4gICAgLnRoZW4oKHJlcykgPT4gKHJlcy5vayA/IHRydWUgOiByZXMuc3RhdHVzKSlcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICB1c2VySW5mby5zZXRBdmF0YXIoZGF0YS5saW5rKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmVycm9yKGVycikpXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgYXZhdGFyRm9ybS5zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBcIlNhdmVcIjtcbiAgICAgIGF2YXRhckZvcm0uY2xvc2UoKTtcbiAgICB9KTtcbn0pO1xuYXZhdGFyRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xuXG5jb25zdCBjYXJkRm9ybSA9IG5ldyBQb3B1cFdpdGhGb3JtKFwiZm9ybVtuYW1lPSdjYXJkLWZvcm0nXVwiLCAoZGF0YSkgPT4ge1xuICBjYXJkRm9ybS5zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBcIlNhdmluZy4uLlwiO1xuICBhcGlcbiAgICAuYWRkTmV3Q2FyZCh7IG5hbWU6IGRhdGEubmFtZSwgbGluazogZGF0YS5saW5rIH0pXG4gICAgLnRoZW4oKHJlcykgPT4gKHJlcy5vayA/IHJlcy5qc29uKCkgOiByZXMuc3RhdHVzKSlcbiAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICBjYXJkR2FsbGVyeS5hZGRJdGVtKHJlcyk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihlcnIpKVxuICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgIGNhcmRGb3JtLnN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiQ3JlYXRlXCI7XG4gICAgICBjYXJkRm9ybS5jbG9zZSgpO1xuICAgIH0pO1xufSk7XG5jYXJkRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xuXG5jb25zdCBwcm9maWxlRm9ybSA9IG5ldyBQb3B1cFdpdGhGb3JtKFwiZm9ybVtuYW1lPSdwcm9maWxlLWZvcm0nXVwiLCAoZGF0YSkgPT4ge1xuICBwcm9maWxlRm9ybS5zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBcIlNhdmluZy4uLlwiO1xuICBhcGlcbiAgICAuZWRpdFVzZXJJbmZvKHsgbmFtZTogZGF0YS5uYW1lLCBqb2I6IGRhdGEuam9iIH0pXG4gICAgLnRoZW4oKHJlcykgPT4gKHJlcy5vayA/IHRydWUgOiByZXMuc3RhdHVzKSlcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICB1c2VySW5mby5zZXRVc2VySW5mbyh7IG5hbWU6IGRhdGEubmFtZSwgYWJvdXQ6IGRhdGEuam9iIH0pO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoZXJyKSlcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBwcm9maWxlRm9ybS5zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBcIlNhdmVcIjtcbiAgICAgIHByb2ZpbGVGb3JtLmNsb3NlKCk7XG4gICAgfSk7XG59KTtcbnByb2ZpbGVGb3JtLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmNvbnN0IGNvbmZpcm1EZWxldGVQb3B1cCA9IG5ldyBQb3B1cERlbGV0ZUNvbmZpcm1hdGlvbihcbiAgXCJmb3JtW25hbWU9J2RlbGV0ZS1mb3JtJ11cIlxuKTtcbmNvbmZpcm1EZWxldGVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuXG5jb25zdCBwaWN0dXJlUG9wdXAgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoXCIucG9wdXBfX3BpY3R1cmVcIik7XG5waWN0dXJlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8qIERlY2xhcmF0aW9uIG9mIGNhcmQgZ2FsbGVyeSBzZWN0aW9uICovXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuY29uc3QgY2FyZEdhbGxlcnkgPSBuZXcgU2VjdGlvbigoZGF0YSkgPT4ge1xuICBjb25zdCBjYXJkID0gbmV3IENhcmQoXG4gICAgZGF0YSxcbiAgICBcIi5jYXJkLXRlbXBsYXRlXCIsXG4gICAgKGRhdGEpID0+IHtcbiAgICAgIHBpY3R1cmVQb3B1cC5vcGVuKGRhdGEpO1xuICAgIH0sXG4gICAgKCkgPT4ge1xuICAgICAgY29uZmlybURlbGV0ZVBvcHVwLnNldFN1Ym1pdEFjdGlvbigoKSA9PiB7XG4gICAgICAgIGFwaS5kZWxldGVDYXJkKGRhdGEuX2lkKTtcbiAgICAgICAgY2FyZC5kZWxldGVDYXJkKCk7XG4gICAgICAgIGNvbmZpcm1EZWxldGVQb3B1cC5jbG9zZSgpO1xuICAgICAgfSk7XG4gICAgICBjb25maXJtRGVsZXRlUG9wdXAub3BlbigpO1xuICAgIH0sXG4gICAgKCkgPT4ge1xuICAgICAgY29uc3QgY2FyZExpa2VJY29uID0gY2FyZC5jYXJkLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZVwiKTtcbiAgICAgIGlmIChjYXJkLmxpa2VkKSB7XG4gICAgICAgIGFwaVxuICAgICAgICAgIC5yZW1vdmVMaWtlKGNhcmQuaWQpXG4gICAgICAgICAgLnRoZW4oKHJlcykgPT4gKHJlcy5vayA/IHRydWUgOiByZXMuc3RhdHVzKSlcbiAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBjYXJkTGlrZUljb24uY2xhc3NMaXN0LnJlbW92ZShcImNhcmRfX2xpa2VfYWN0aXZlXCIpO1xuICAgICAgICAgICAgY2FyZC5saWtlZCA9IGZhbHNlO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcGlcbiAgICAgICAgICAuYWRkTGlrZShjYXJkLmlkKVxuICAgICAgICAgIC50aGVuKChyZXMpID0+IChyZXMub2sgPyB0cnVlIDogcmVzLnN0YXR1cykpXG4gICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgY2FyZExpa2VJY29uLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19saWtlX2FjdGl2ZVwiKTtcbiAgICAgICAgICAgIGNhcmQubGlrZWQgPSB0cnVlO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XG4gICAgICB9XG4gICAgfVxuICApO1xuICBjb25zdCBjYXJkRWxlbWVudCA9IGNhcmQuZ2VuZXJhdGVDYXJkKCk7XG4gIGNhcmRHYWxsZXJ5LmNvbnRhaW5lci5hcHBlbmQoY2FyZEVsZW1lbnQpO1xufSwgXCIuZ2FsbGVyeV9fY2FyZHNcIik7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLyogRXZlbnQgbGlzdGVuZXJzIGZvciBvcGVuaW5nIGZvcm1zICovXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbmVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgZGF0YSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XG4gIHByb2ZpbGVGb3JtTmFtZS52YWx1ZSA9IGRhdGEubmFtZTtcbiAgcHJvZmlsZUZvcm1Kb2IudmFsdWUgPSBkYXRhLmpvYjtcblxuICBmb3JtVmFsaWRhdG9yc1tcInByb2ZpbGUtZm9ybVwiXS5yZXNldFZhbGlkYXRpb24oKTtcbiAgcHJvZmlsZUZvcm0ub3BlbigpO1xufSk7XG5cbmFkZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICBmb3JtVmFsaWRhdG9yc1tcImNhcmQtZm9ybVwiXS5yZXNldFZhbGlkYXRpb24oKTtcbiAgY2FyZEZvcm0ub3BlbigpO1xufSk7XG5cbmF2YXRhckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICBmb3JtVmFsaWRhdG9yc1tcImF2YXRhci1mb3JtXCJdLnJlc2V0VmFsaWRhdGlvbigpO1xuICBhdmF0YXJGb3JtLm9wZW4oKTtcbn0pO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vKiBQcm9taXNlcyBmb3IgaW5pdGlhbCBkYXRhICovXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5jb25zdCBpbml0aWFsQ2FyZHMgPSBhcGlcbiAgLmdldENhcmRJbmZvKClcbiAgLnRoZW4oKHJlcykgPT4gKHJlcy5vayA/IHJlcy5qc29uKCkgOiByZXMuc3RhdHVzKSlcbiAgLnRoZW4oKHJlcykgPT4ge1xuICAgIGNhcmRHYWxsZXJ5LnNldEl0ZW1zKHJlcyk7XG4gICAgY2FyZEdhbGxlcnkucmVuZGVySXRlbXMoKTtcbiAgfSlcbiAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XG5cbmNvbnN0IGluaXRpYWxQcm9maWxlID0gYXBpXG4gIC5nZXRVc2VySW5mbygpXG4gIC50aGVuKChyZXMpID0+IChyZXMub2sgPyByZXMuanNvbigpIDogcmVzLnN0YXR1cykpXG4gIC50aGVuKChyZXMpID0+IHtcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyh7IG5hbWU6IHJlcy5uYW1lLCBhYm91dDogcmVzLmFib3V0IH0pO1xuICAgIHVzZXJJbmZvLnNldEF2YXRhcihyZXMuYXZhdGFyKTtcbiAgfSlcbiAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XG5cblByb21pc2UuYWxsKFtpbml0aWFsQ2FyZHMsIGluaXRpYWxQcm9maWxlXSlcbiAgLnRoZW4oKHJlcykgPT4gKHJlcy5vayA/IHJlcy5qc29uKCkgOiByZXMuc3RhdHVzKSlcbiAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xyXG4gIGNvbnN0cnVjdG9yKHsgYmFzZVVybCwgYXV0aG9yaXphdGlvbiB9KSB7XHJcbiAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcclxuICAgIHRoaXMuX2F1dGhvcml6YXRpb24gPSBhdXRob3JpemF0aW9uO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9hdXRob3JpemF0aW9uLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRDYXJkSW5mbygpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhvcml6YXRpb24sXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGVkaXRVc2VySW5mbyh7IG5hbWUsIGpvYiB9KSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgYXV0aG9yaXphdGlvbjogdGhpcy5fYXV0aG9yaXphdGlvbixcclxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgYWJvdXQ6IGpvYixcclxuICAgICAgfSksXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGVkaXRQcm9maWxlUGljdHVyZShsaW5rKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhvcml6YXRpb24sXHJcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBhdmF0YXI6IGxpbmssXHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhZGROZXdDYXJkKHsgbmFtZSwgbGluayB9KSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9hdXRob3JpemF0aW9uLFxyXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICBsaW5rOiBsaW5rLFxyXG4gICAgICB9KSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlQ2FyZChpZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7aWR9YCwge1xyXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl9hdXRob3JpemF0aW9uLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhZGRMaWtlKGlkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtpZH0vbGlrZXNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX2F1dGhvcml6YXRpb24sXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUxpa2UoaWQpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2lkfS9saWtlc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgYXV0aG9yaXphdGlvbjogdGhpcy5fYXV0aG9yaXphdGlvbixcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3IoeyBuYW1lU2VsZWN0b3IsIGpvYlNlbGVjdG9yLCBhdmF0YXJTZWxlY3RvciB9KSB7XHJcbiAgICB0aGlzLl9uYW1lRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobmFtZVNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2pvYkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGpvYlNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2F2YXRhclNlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXJTZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5hbWU6IHRoaXMuX25hbWVFbGVtZW50LnRleHRDb250ZW50LFxyXG4gICAgICBqb2I6IHRoaXMuX2pvYkVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckluZm8oeyBuYW1lLCBhYm91dCB9KSB7XHJcbiAgICB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICB0aGlzLl9qb2JFbGVtZW50LnRleHRDb250ZW50ID0gYWJvdXQ7XHJcbiAgfVxyXG5cclxuICBzZXRBdmF0YXIobGluaykge1xyXG4gICAgdGhpcy5fYXZhdGFyU2VsZWN0b3Iuc3JjID0gbGluaztcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cERlbGV0ZUNvbmZpcm1hdGlvbiBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuZm9ybUVsZW1lbnQgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5mb3JtXCIpO1xyXG4gIH1cclxuXHJcbiAgc2V0U3VibWl0QWN0aW9uKGFjdGlvbikge1xyXG4gICAgdGhpcy5faGFuZGxlU3VibWl0Q2FsbGJhY2sgPSBhY3Rpb247XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuZm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9oYW5kbGVTdWJtaXRDYWxsYmFjaygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5fcG9wdXBJbWFnZSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW1nXCIpO1xuICAgIHRoaXMuX3BvcHVwQ2FwdGlvbiA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiZmlnY2FwdGlvblwiKTtcbiAgfVxuXG4gIG9wZW4oeyBuYW1lLCBsaW5rIH0pIHtcbiAgICB0aGlzLl9wb3B1cEltYWdlLmFsdCA9IG5hbWU7XG4gICAgdGhpcy5fcG9wdXBJbWFnZS5zcmMgPSBsaW5rO1xuICAgIHRoaXMuX3BvcHVwQ2FwdGlvbi50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgc3VwZXIub3BlbigpO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3RvcihyZW5kZXJlciwgY2xhc3NTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjbGFzc1NlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIHJlbmRlckl0ZW1zKCkge1xyXG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbShpdGVtKSB7XHJcbiAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcclxuICB9XHJcblxyXG4gIHNldEl0ZW1zKGl0ZW1zKSB7XHJcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsiQ2FyZCIsImNvbnN0cnVjdG9yIiwiZGF0YSIsImNhcmRTZWxlY3RvciIsImhhbmRsZUltYWdlQ2xpY2siLCJoYW5kbGVEZWxldGVDbGljayIsImhhbmRsZUxpa2VDbGljayIsInRoaXMiLCJfbmFtZSIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJsaWtlZCIsImlzTGlrZWQiLCJpZCIsIl9pZCIsIl9jYXJkU2VsZWN0b3IiLCJfaGFuZGxlSW1hZ2VDbGljayIsIl9oYW5kbGVEZWxldGVDbGljayIsIl9oYW5kbGVMaWtlQ2xpY2siLCJfZ2V0VGVtcGxhdGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiY2FyZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJfY2FyZEltYWdlRWxlbWVudCIsImRlbGV0ZUNhcmQiLCJyZW1vdmUiLCJnZW5lcmF0ZUNhcmQiLCJzcmMiLCJhbHQiLCJ0ZXh0Q29udGVudCIsImNsYXNzTGlzdCIsImFkZCIsIkZvcm1WYWxpZGF0b3IiLCJzZXR0aW5ncyIsImZvcm1FbGVtZW50IiwiX2Zvcm1TZWxlY3RvciIsImZvcm1TZWxlY3RvciIsIl9pbnB1dFNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9mb3JtRWxlbWVudCIsIl9pbnB1dExpc3QiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiX2J1dHRvbkVsZW1lbnQiLCJfc2hvd0lucHV0RXJyb3IiLCJpbnB1dEVsZW1lbnQiLCJlcnJvck1lc3NhZ2UiLCJlcnJvckVsZW1lbnQiLCJfaGlkZUlucHV0RXJyb3IiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwidmFsaWRpdHkiLCJ2YWxpZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2hhc0ludmFsaWRJbnB1dCIsInNvbWUiLCJfdG9nZ2xlQnV0dG9uU3RhdGUiLCJkaXNhYmxlQnV0dG9uIiwiZGlzYWJsZWQiLCJmb3JFYWNoIiwiZW5hYmxlVmFsaWRhdGlvbiIsInJlc2V0VmFsaWRhdGlvbiIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsIl9wb3B1cFNlbGVjdG9yIiwiX3BvcHVwRWxlbWVudCIsImNsb3Nlc3QiLCJvcGVuIiwiX2hhbmRsZUVzY0Nsb3NlIiwiX2hhbmRsZU91dHNpZGVDbGlja0Nsb3NlIiwiY2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXZ0Iiwia2V5IiwidGFyZ2V0IiwiY29udGFpbnMiLCJzZXRFdmVudExpc3RlbmVycyIsIlBvcHVwV2l0aEZvcm0iLCJzdWJtaXRGb3JtIiwic3VwZXIiLCJzdWJtaXRCdXR0b24iLCJfc3VibWl0Rm9ybSIsIl9nZXRJbnB1dFZhbHVlcyIsImlucHV0RmllbGRzIiwiZmllbGQiLCJ2YWx1ZSIsInJlc2V0IiwicHJldmVudERlZmF1bHQiLCJlZGl0QnV0dG9uIiwiYWRkQnV0dG9uIiwiYXZhdGFyQnV0dG9uIiwicHJvZmlsZUZvcm1OYW1lIiwiZm9ybXMiLCJlbGVtZW50cyIsInByb2ZpbGVGb3JtSm9iIiwiZm9ybVZhbGlkYXRvcnMiLCJmb3JtU2V0dGluZ3MiLCJ2YWxpZGF0b3IiLCJmb3JtTmFtZSIsImdldEF0dHJpYnV0ZSIsImFwaSIsIl9yZWYiLCJiYXNlVXJsIiwiYXV0aG9yaXphdGlvbiIsIl9iYXNlVXJsIiwiX2F1dGhvcml6YXRpb24iLCJnZXRVc2VySW5mbyIsImZldGNoIiwiaGVhZGVycyIsImdldENhcmRJbmZvIiwiZWRpdFVzZXJJbmZvIiwiX3JlZjIiLCJqb2IiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImFib3V0IiwiZWRpdFByb2ZpbGVQaWN0dXJlIiwiYXZhdGFyIiwiYWRkTmV3Q2FyZCIsIl9yZWYzIiwiYWRkTGlrZSIsInJlbW92ZUxpa2UiLCJ1c2VySW5mbyIsIm5hbWVTZWxlY3RvciIsImpvYlNlbGVjdG9yIiwiYXZhdGFyU2VsZWN0b3IiLCJfbmFtZUVsZW1lbnQiLCJfam9iRWxlbWVudCIsIl9hdmF0YXJTZWxlY3RvciIsInNldFVzZXJJbmZvIiwic2V0QXZhdGFyIiwiYXZhdGFyRm9ybSIsInRoZW4iLCJyZXMiLCJvayIsInN0YXR1cyIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiZmluYWxseSIsImNhcmRGb3JtIiwianNvbiIsImNhcmRHYWxsZXJ5IiwiYWRkSXRlbSIsInByb2ZpbGVGb3JtIiwiY29uZmlybURlbGV0ZVBvcHVwIiwic2V0U3VibWl0QWN0aW9uIiwiYWN0aW9uIiwiX2hhbmRsZVN1Ym1pdENhbGxiYWNrIiwicGljdHVyZVBvcHVwIiwiX3BvcHVwSW1hZ2UiLCJfcG9wdXBDYXB0aW9uIiwicmVuZGVyZXIiLCJjbGFzc1NlbGVjdG9yIiwiX3JlbmRlcmVyIiwiY29udGFpbmVyIiwicmVuZGVySXRlbXMiLCJfaXRlbXMiLCJpdGVtIiwic2V0SXRlbXMiLCJpdGVtcyIsImNhcmRMaWtlSWNvbiIsImNhcmRFbGVtZW50IiwiYXBwZW5kIiwiaW5pdGlhbENhcmRzIiwiaW5pdGlhbFByb2ZpbGUiLCJQcm9taXNlIiwiYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==